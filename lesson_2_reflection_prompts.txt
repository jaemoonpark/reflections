Initializing a repository is neccessary to create a git repository. It takes a snapshot of the current directory.

-----

*git commit -> creates a commit of the files in the staging area.
*git add -filename- -> adds file to staging area
*git reset -filename- -> removes file from staging area
Staging Area-> marks file to be committed. Useful when wanting to commit only certain files.

*git init- Initilizates new empty git repository
*git status â€” shows which files have changed since the last commit. also shows files in working directory as well as files that are in and not in the staging area.

HEAD- name for current commit

Types of commit:
feat: a new feature
fix: a bug fix
docs: changes to documentation
style: formatting, missing semi colons, etc; no code change
refactor: refactoring production code
test: adding tests, refactoring test; no production code change
chore: updating build tasks, package manager configs, etc; no production code change

----
*git diff without arguments shows differences in files between staging area and current working directory. (files appear as ---+++)

*git diff --staged, shows difference between staging area and repository (if you add a line a code in a file in staging area, shows as a + compared the unmodified repository)

*git reset --hard, resets changes in working directory and staging area.

*git branch, shows current branches

*git branch -name-, creates a branch with the name

Asterick next to a branch after using git branch refers to currently checked out branch
----
braches

master- name given to the main branch

Detatched head message means that you were at a commit without a branch name.

tip of the branch- current last commit

merging- combining two commits

For experimental features, don't make changes on the master branch

Branches help projects remained organized. It allows for easy identification based on change and allows for independent maintence for various versions. Branches are great for group projects-- some people can work on a bug-fix branch while others can work on features.

*git log --graph --oneline -branch one- -branch two-
	-> *these commits existed at branch one after branch two was created.
	-> |these commits are added to branch two
	-> *these commits existed before the branch two was created

git checkout -b -new_branch_name- -> equivalent to creating a branch and checking it out

---
merge a branch into the master (which is adding a feaeture, fix, etc)

important to realize that branches and commits are different!! commits are the actual bundles of file changes while branches are simply labels. however, if you delete a branch and you have no way to access the commits, the commits are unreachable!!

*git merge -first branch- -second branch-, merges second branch into the first branch (remember merging creates a new commit)


 
*git show -commit id-, shows difference between committed argument and its parent

*git branch -d -branch name-, deletes branch label

we merge two branches together in order to implement changes to the master file. branches are used so different people can work on different changes. we represent it using the diagram to show which changes to keep, remove, or add.

if git merge creates a conflict, it will mark it on the code using <<<<<<<. it identifies conflicting lines in both of the code while also showing the merged common ancestors (the code that was replaced/modified in both files(?).

*git log -n # (shows that many # of recent commits)
syncing locally and github does not happen automatically

Remotes- Reference to another repository. Remote repositories helps push (send) and pull (recieve) data.  This is most commonly done through branches.
	Already existing commits on github that is pushed through branch will not be pushed.

You must have at least one commit in order to clone a repository so check Initialize this repository with a README when starting completely new.

*git clone -url- -> clones a repository from github onto your local machine
	A remote is automatically set up pointing back to the cloned repository.
*git remote -noarguments- -> Shows all current remotes
*git remote add -name- -url- -> adds a remote, common practice is to name the remove origin if you are only going to have one remote
*git remove -v -> used to show information about link added (making it verbose)
*git push -remotename- -localbranch- -> pushes local branch to remotename
*git pull -remotename- -remotebranch- -> pulls the remotebranch from the remote to the local

You would want to use a remote repository rather than a local file in case you want to access your data from a different computer or if you are doing a collaboration with people from varying locations.

It's good having to pull changes manually because in some cases, you want only specific parts of files. In addition, other people can contribute changes and if their commits got accepted, automatically syncing to yours can cause some confusion and error.

Forking- Allows to clone a repository onto your github account without transferring it to your local machine and then you uploading it yourself. Makes it easier to identify original author of repository as well as keeping data such as how many times forked. Also helps it easier to make suggestions.

To give someone permission to push to a repository, you have to add their username to collaborator.

Use forks when wanting to clone someone else repository directly onto your github account. Use clone when wanting to have the repository directly on your local machine. Use branch when wanting to add seperate features or fix bugs indepedently from another contributer.

When you have a remote, some data is copied into your local repository. One thing is that you get local copies of all remote branches. The state of the branches are parallel to when you last pushed or pulled in other words, it updates when you push or pull. You also get the last known position of the branch of the remote. For example, you get a branch that points to the latest master of the github repository. The branch name include remote name as well as the branch name formatted as the following remotename/branchofremote (updates each time you push or pull data). For example, origin/master.

*git fetch -name- -> Updates the remote branch on the local repository, branching it off (?)

*git fetch origin -> updates all local copies of every branch for the origin remote

*git pull origin master -> equivalent to *git fetch origin, git merge master origin/master.
pulls the master from the remote, and merges that master with the local master

*git status -> compares local master branch to origin/master

*git log origin/master -> shows commits of the origin/master branch

git branch -a -> shows remote branches as well as local branches

When merge conflicts arise, don't forget to add the resolved file back in the staging area.

Don't forget to be in the branch when merging together
	-> ex git merge master origin/master -> make sure you're in master branch

Fast forward merges -> takes place when you merge two commits, one of them being an ancestor of the other. when you merge descendant into ancestor, instead of creating a new commit, the ancestor now points to the descendant commit. This will not happen using the merge button on github even if all of the conditions are satisfied

Having a copy of the last known state of remote stored locally would be useful for keeping track of updates, figuring out potential merge conflicts, etc.

Pushing the same branch automatically updates the pull request.

Without github, it would be much more difficult to collaborate on projects. It would involve lots of file transfers. However, one potential benefit is that internet acess would be optional.

For merge conflicts for pull requests, you have to first clone the remote branch, modify it (usually by merge the remote's master into your branch), then push your branch into the master. This is common for collaboration because you generally want approval before modifying the master branch.

on different oil, merge master into different oil, *git merge master different-oil

*gitk -> hella useful for visualization

*git push -f origin <branch> -> useful in case you get "updates were rejected because the tip..."


To make label an existing commit with a branch,
*git checkout -gitID or BranchID-
*git branch -> check to see if branch exists
*git branch -D -branch name- -> if branch name already exists
*git branch -branch name- -> and finished

you push/pull branches

You would want to make changes in a seperate branch when you're directly modifying something in master that would result in a conflict when merging. Doing so will help identify conflicts easier and to make fixes easier.
